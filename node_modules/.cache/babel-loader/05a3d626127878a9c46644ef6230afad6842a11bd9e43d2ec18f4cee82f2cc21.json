{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._url = options.baseUrl;\n    this._headers = options.headers;\n    this._token = options.headers.authorization;\n  }\n  getInfo() {\n    return fetch(`${this._url}/users/me`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`${res.status}`);\n    }\n  }\n  getPicture() {\n    return fetch(`${this._url}/cards`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n  addHeartonServer(infoforServer) {\n    return fetch(`${this._url}/cards/${infoforServer}/likes`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n  eraseHeartonServer(infoforServer) {\n    return fetch(`${this._url}/cards/${infoforServer}/likes`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n  setInfoonServer(infoforServer) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: infoforServer.name,\n        about: infoforServer.job\n      })\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n  setAvataronServer(infoforServer) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: infoforServer.avatar\n      })\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n  eraseCardonServer(infoforServer) {\n    return fetch(`${this._url}/cards/${infoforServer}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n  addCardonServer(infoforServer) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: infoforServer.place,\n        link: infoforServer.link\n      })\n    }).then(res => {\n      return this._checkResponse(res);\n    });\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-69',\n  headers: {\n    authorization: '39c5dd3e-18c5-4109-bb7f-0a82c5dea405',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_url","baseUrl","_headers","headers","_token","authorization","getInfo","fetch","then","res","_checkResponse","ok","json","Promise","reject","status","getPicture","addHeartonServer","infoforServer","method","eraseHeartonServer","setInfoonServer","body","JSON","stringify","name","about","job","setAvataronServer","avatar","eraseCardonServer","addCardonServer","place","link","api"],"sources":["C:/Users/08908/Desktop/mesto-react/src/utils/api.js"],"sourcesContent":["class Api {\r\n    constructor (options) {\r\n  \r\n        this._url = options.baseUrl;\r\n        this._headers = options.headers;\r\n        this._token = options.headers.authorization;\r\n    }\r\n  \r\n    getInfo(){\r\n        return fetch(`${this._url}/users/me`, {\r\n           headers: {\r\n               authorization:  this._token\r\n           }\r\n        }).then((res) => {\r\n          return  this._checkResponse(res)\r\n          })}\r\n  \r\n        _checkResponse(res){\r\n          if(res.ok) {\r\n            return res.json();\r\n          } else {\r\n          return Promise.reject(`${res.status}`);\r\n          }\r\n        }\r\n  \r\n     getPicture(){\r\n         return fetch(`${this._url}/cards`, {\r\n            headers: {\r\n                authorization:  this._token\r\n            }\r\n         })\r\n        .then((res) => {\r\n        return  this._checkResponse(res)\r\n        })\r\n    }\r\n    addHeartonServer(infoforServer){\r\n        return fetch(`${this._url}/cards/${infoforServer}/likes`, {\r\n            method: 'PUT',\r\n             headers: {\r\n                 authorization: this._token,\r\n                 'Content-Type': 'application/json'\r\n               },\r\n          })\r\n          .then((res) => {\r\n            return  this._checkResponse(res)\r\n            })\r\n    }\r\n    eraseHeartonServer(infoforServer){\r\n        return fetch(`${this._url}/cards/${infoforServer}/likes`, {\r\n            method: 'DELETE',\r\n             headers: {\r\n                 authorization: this._token,\r\n                 'Content-Type': 'application/json'\r\n               },\r\n          })\r\n          .then((res) => {\r\n            return  this._checkResponse(res)\r\n            })\r\n    }\r\n    setInfoonServer(infoforServer){\r\n        return fetch(`${this._url}/users/me`, {\r\n            method: 'PATCH',\r\n             headers: {\r\n                 authorization: this._token,\r\n                 'Content-Type': 'application/json'\r\n               },\r\n            body: JSON.stringify({\r\n              name: infoforServer.name,\r\n              about: infoforServer.job\r\n            })\r\n          })\r\n          .then((res) => {\r\n            return  this._checkResponse(res)\r\n            })\r\n    }\r\n    setAvataronServer(infoforServer){\r\n        return fetch(`${this._url}/users/me/avatar`, {\r\n            method: 'PATCH',\r\n             headers: {\r\n                 authorization: this._token,\r\n                 'Content-Type': 'application/json'\r\n               },\r\n            body: JSON.stringify({\r\n              avatar: infoforServer.avatar,\r\n            })\r\n          })\r\n          .then((res) => {\r\n            return  this._checkResponse(res)\r\n            })\r\n    }\r\n    eraseCardonServer(infoforServer){\r\n        return fetch(`${this._url}/cards/${infoforServer}`, {\r\n            method: 'DELETE',\r\n             headers: {\r\n                 authorization: this._token,\r\n                 'Content-Type': 'application/json'\r\n               },\r\n          })\r\n          .then((res) => {\r\n            return  this._checkResponse(res)\r\n            })\r\n    }\r\n    addCardonServer(infoforServer){\r\n        return fetch(`${this._url}/cards`, {\r\n            method: 'POST',\r\n             headers: {\r\n                 authorization: this._token,\r\n                 'Content-Type': 'application/json'\r\n               },\r\n            body: JSON.stringify({\r\n              name: infoforServer.place,\r\n              link: infoforServer.link\r\n            })\r\n          })\r\n          .then((res) => {\r\n            return  this._checkResponse(res)\r\n            })\r\n    }\r\n    \r\n  \r\n  }\r\n\r\n  const api = new Api({\r\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-69',\r\n    headers: {\r\n      authorization: '39c5dd3e-18c5-4109-bb7f-0a82c5dea405',\r\n      'Content-Type': 'application/json'\r\n    }\r\n  });\r\n\r\n  export default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
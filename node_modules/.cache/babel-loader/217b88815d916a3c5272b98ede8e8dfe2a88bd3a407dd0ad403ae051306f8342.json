{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Downloads\\\\Telegram Desktop\\\\mesto-react10last1-1\\\\mesto-react\\\\src\\\\components\\\\App.jsx\",\n  _s = $RefreshSig$();\n//import logo from './logo.svg';\nimport { useCallback, useEffect, useState } from \"react\";\nimport CurrentUserContext from \"../context/CurrentUserContexts\";\nimport api from \"../utils/api\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Footer from \"./Footer\";\nimport ImagePopup from \"./ImagePopup\";\nimport EditProfilePopup from \"./EditProfilePopup\";\nimport EditAvatarPopup from \"./EditAvatarPopup\";\nimport AddPlacePopup from \"./AddPlacePopup\";\nimport InfoDatas from \"./InfoDatas\";\n//import { useNavigate } from \"react-router-dom\";\nimport PopupWithForm from \"./PopupWIthForm\";\nimport { getUserData } from \"../utils/auth\";\n\n//import { useState } from \"react\";\n//import Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const navigate = useNavigate();\n  //стейты для попапов\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false);\n  const [isDeletePopupOpen, setIsDeletePopupOpen] = useState(false);\n  const [isPictureOnPopup, setIsPictureOnPopup] = useState(false);\n  //не надо\n  const [selectedCard, setSelectedCard] = useState({});\n  //стейт для контекста\n  const [currentUser, setCurrentUser] = useState({});\n  const [infoUser, setinfoUser] = useState([]); //надо\n  //стейты для карточе\n  //не надо\n  const [cards, setCards] = useState([]);\n  const [idCardForErase, setIdCardForErase] = useState('');\n  //стейты для регистрации и логина\n  const [isSuccessful, setIsSuccessful] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [loggedIn, setLoggedIn] = useState(false);\n  //переменная состояния попапов\n  const isOpen = isEditAvatarPopupOpen || isAddPlacePopupOpen || isEditAvatarPopupOpen || isDeletePopupOpen || isPictureOnPopup || isSuccessful || isError;\n  const closeAllPopup = useCallback(() => {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setIsDeletePopupOpen(false);\n    setIsPictureOnPopup(false);\n    setIsSuccessful(false);\n    setIsError(false);\n  }, []);\n  const closeByEscape = useCallback(evt => {\n    if (evt.key === 'Escape') {\n      closeAllPopup();\n      document.removeEventListener('keydown', closeByEscape);\n    }\n  }, [closeAllPopup]);\n  function listnerEscape() {\n    document.addEventListener('keydown', closeByEscape);\n  }\n  const closeAllPopupForm = useCallback(() => {\n    closeAllPopup();\n    document.removeEventListener('keydown', closeByEscape);\n  }, [closeAllPopup, closeByEscape]);\n\n  //надо добавить!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  useEffect(() => {\n    if (localStorage.jwt) {\n      getUserData(localStorage.jwt).then(res => {\n        setinfoUser(res.data.email);\n        setLoggedIn(true);\n        navigate('/');\n      }).catch(error => console.log(`Ощибка повторного входа при авторизации ${error}`));\n    }\n  }, [navigate]);\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n    listnerEscape();\n  }\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n    listnerEscape();\n  }\n  function handleDeleteClick(IDofCard) {\n    setIsDeletePopupOpen(true);\n    listnerEscape();\n    setIdCardForErase(IDofCard);\n  }\n  function handleCardClick(card) {\n    setSelectedCard(card);\n    setIsPictureOnPopup(true);\n    listnerEscape();\n  }\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n    listnerEscape();\n  }\n\n  //Поправить !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  useEffect(() => {\n    //setSetupCard(true)\n    //Вывод массива карточек с сервера\n    Promise.all([api.getInfo(), api.getPicture()]).then(([infoUser, infoPicture]) => {\n      //console.log(infoPicture)\n      setCurrentUser(infoUser);\n      setCards(infoPicture);\n\n      //setSetupCard(false )\n    }).catch(error => console.log('Ошибка при загрузке карточек с сервера', error));\n\n    //console.log(infoPicture)\n  }, []);\n  function handleCardDelete(evt) {\n    evt.preventDefault();\n    api.eraseCardonServer(idCardForErase).then(res => {\n      setCards(cards.filter(items => {\n        return items._id !== idCardForErase;\n      }));\n      //console.log(res)\n      closeAllPopupForm();\n    }).catch(err => console.log('Ошибка удаления карточки')).finally(() => closeAllPopupForm(false));\n  }\n  function handleUpdataUser(data, eraseInpup) {\n    console.log(data);\n    api.setInfoonServer(data).then(res => {\n      setCurrentUser(res);\n      closeAllPopupForm();\n      eraseInpup();\n    }).catch(error => console.log('Ошибка при загрузке данных пользователя на сервера', error)).finally(() => closeAllPopup(false));\n  }\n  function handleUpdataAvatar(data, eraseInpup) {\n    api.setAvataronServer(data).then(res => {\n      setCurrentUser(res);\n      closeAllPopupForm();\n      eraseInpup();\n    }).catch(error => console.log('Ошибка при загрузке данных аватара на сервера', error)).finally(() => closeAllPopupForm(false));\n  }\n  function handleAddPlaceSubmit(data, eraseInpup) {\n    api.addCardonServer(data).then(res => {\n      setCards([res, ...cards]);\n      closeAllPopupForm();\n      eraseInpup();\n    }).catch(error => console.log('Ошибка при загрузке данных карточки на сервера', error)).finally(() => closeAllPopupForm(false));\n  }\n\n  //  function handleCardLike(card) {\n  //    // Снова проверяем, есть ли уже лайк на этой карточке\n  //    const isLiked = card.likes.some(i => i._id === currentUser._id);\n  //\n  //    // Отправляем запрос в API и получаем обновлённые данные карточки\n  //    api.changeLikeCardStatus(card._id, !isLiked).then((newCard) => {\n  //      setCards((state) => state.map((c) => c._id === card._id ? newCard : c));\n  //    });\n  //  }\n\n  //нужно добавить!!!!!!!\n\n  //нужно добавить!!!!!!!\n\n  return /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n    value: currentUser,\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        onEditAvatar: handleEditAvatarClick,\n        onEditProfile: handleEditProfileClick,\n        onAddPlace: handleAddPlaceClick,\n        onCardClick: handleCardClick,\n        onDeletePlace: handleDeleteClick,\n        cards: cards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditAvatarPopup, {\n        onUpdateAvatar: handleUpdataAvatar,\n        isOpen: isEditAvatarPopupOpen,\n        onClose: closeAllPopupForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditProfilePopup, {\n        onUpdateUser: handleUpdataUser,\n        isOpen: isEditProfilePopupOpen,\n        onClose: closeAllPopupForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddPlacePopup, {\n        onAddPlace: handleAddPlaceSubmit,\n        isOpen: isAddPlacePopupOpen,\n        onClose: closeAllPopupForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PopupWithForm, {\n        name: \"delete\",\n        title: \"\\u0412\\u044B \\u0443\\u0432\\u0435\\u0440\\u0435\\u043D\\u044B?\",\n        subtitle: \"\\u0414\\u0430\",\n        isOpen: isDeletePopupOpen,\n        onClose: closeAllPopupForm,\n        onSubmit: handleCardDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImagePopup, {\n        cardPic: selectedCard,\n        onClose: closeAllPopupForm,\n        isOpen: isPictureOnPopup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 362,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5JRij8jXni+D2hucMOcU+sqBahs=\", true);\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useEffect","useState","CurrentUserContext","api","Header","Main","Footer","ImagePopup","EditProfilePopup","EditAvatarPopup","AddPlacePopup","InfoDatas","PopupWithForm","getUserData","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","navigate","useNavigate","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isDeletePopupOpen","setIsDeletePopupOpen","isPictureOnPopup","setIsPictureOnPopup","selectedCard","setSelectedCard","currentUser","setCurrentUser","infoUser","setinfoUser","cards","setCards","idCardForErase","setIdCardForErase","isSuccessful","setIsSuccessful","isError","setIsError","loggedIn","setLoggedIn","isOpen","closeAllPopup","closeByEscape","evt","key","document","removeEventListener","listnerEscape","addEventListener","closeAllPopupForm","localStorage","jwt","then","res","data","email","catch","error","console","log","handleAddPlaceClick","handleEditAvatarClick","handleDeleteClick","IDofCard","handleCardClick","card","handleEditProfileClick","Promise","all","getInfo","getPicture","infoPicture","handleCardDelete","preventDefault","eraseCardonServer","filter","items","_id","err","finally","handleUpdataUser","eraseInpup","setInfoonServer","handleUpdataAvatar","setAvataronServer","handleAddPlaceSubmit","addCardonServer","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","onEditAvatar","onEditProfile","onAddPlace","onCardClick","onDeletePlace","onUpdateAvatar","onClose","onUpdateUser","name","title","subtitle","onSubmit","cardPic","_c","$RefreshReg$"],"sources":["C:/Users/User/Downloads/Telegram Desktop/mesto-react10last1-1/mesto-react/src/components/App.jsx"],"sourcesContent":["//import logo from './logo.svg';\nimport { useCallback, useEffect, useState } from \"react\";\nimport CurrentUserContext from \"../context/CurrentUserContexts\";\nimport api from \"../utils/api\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Footer from \"./Footer\";\nimport ImagePopup from \"./ImagePopup\";\nimport EditProfilePopup from \"./EditProfilePopup\";\nimport EditAvatarPopup from \"./EditAvatarPopup\";\nimport AddPlacePopup from \"./AddPlacePopup\";\nimport InfoDatas from \"./InfoDatas\";\n//import { useNavigate } from \"react-router-dom\";\nimport PopupWithForm from \"./PopupWIthForm\";\n\nimport {getUserData} from \"../utils/auth\"\n\n//import { useState } from \"react\";\n//import Card from \"./Card\";\n\n\n\n\nfunction App() {\n  const navigate = useNavigate()\n//стейты для попапов\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false);\n  const [isDeletePopupOpen, setIsDeletePopupOpen] = useState(false);\n  const [isPictureOnPopup, setIsPictureOnPopup] = useState(false);\n//не надо\n  const [selectedCard, setSelectedCard] = useState({});\n   //стейт для контекста\n  const [currentUser, setCurrentUser] = useState({})\n  const [infoUser, setinfoUser] = useState([])//надо\n//стейты для карточе\n//не надо\n  const [cards, setCards] = useState([]);\n  const [idCardForErase, setIdCardForErase] = useState('');\n    //стейты для регистрации и логина\n  const [isSuccessful, setIsSuccessful] = useState(false)\n  const [isError, setIsError] = useState(false)\n  const [loggedIn, setLoggedIn] = useState(false)\n  //переменная состояния попапов\n  const isOpen = isEditAvatarPopupOpen || isAddPlacePopupOpen || isEditAvatarPopupOpen || isDeletePopupOpen || isPictureOnPopup || isSuccessful || isError\n\n\n\n\n\n\n\n\n\n\n\n\n  const closeAllPopup = useCallback(() => {\n    setIsEditProfilePopupOpen(false)\n    setIsAddPlacePopupOpen(false)\n    setIsEditAvatarPopupOpen(false)\n    setIsDeletePopupOpen(false)\n    setIsPictureOnPopup(false)\n    setIsSuccessful(false)\n    setIsError(false)\n  }, [])\n\n\n\n\n\n\n\n\n\n\n\n\n  const closeByEscape = useCallback((evt) => {\n    if (evt.key === 'Escape') {\n      closeAllPopup()\n      document.removeEventListener('keydown', closeByEscape)\n    }\n    }, [closeAllPopup]\n  )\n\n  function listnerEscape() {\n    document.addEventListener('keydown', closeByEscape)\n  }\n\n  const closeAllPopupForm = useCallback(() => {\n    closeAllPopup()\n    document.removeEventListener('keydown', closeByEscape)\n  }, [closeAllPopup, closeByEscape])\n\n\n\n\n\n\n\n\n//надо добавить!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nuseEffect(() => {\n  if (localStorage.jwt) {\n    getUserData(localStorage.jwt)\n      .then(res => {\n        setinfoUser(res.data.email)\n        setLoggedIn(true)\n        navigate('/')\n      })\n      .catch(error => console.log(`Ощибка повторного входа при авторизации ${error}`))\n  }\n}, [navigate])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true)\n    listnerEscape()\n  }\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true)\n    listnerEscape()\n  }\n\n  function handleDeleteClick(IDofCard) {\n    setIsDeletePopupOpen(true)\n    listnerEscape()\n    setIdCardForErase(IDofCard)\n  }\n\n  function handleCardClick(card) {\n    setSelectedCard(card)\n    setIsPictureOnPopup(true)\n    listnerEscape()\n  }\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true)\n    listnerEscape()\n  }\n\n\n\n\n//Поправить !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  useEffect(() => {\n    //setSetupCard(true)\n    //Вывод массива карточек с сервера\n    Promise.all([api.getInfo(), api.getPicture()])\n      .then(([infoUser, infoPicture]) => {\n        //console.log(infoPicture)\n        setCurrentUser(infoUser)\n        setCards(infoPicture)\n\n        //setSetupCard(false )\n      })\n      .catch((error => console.log('Ошибка при загрузке карточек с сервера', error)))\n\n    //console.log(infoPicture)\n  }, [])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  function handleCardDelete(evt) {\n    evt.preventDefault()\n    api.eraseCardonServer(idCardForErase)\n      .then(res => {\n        setCards(cards.filter(items => {\n          return items._id !== idCardForErase\n        }))\n        //console.log(res)\n        closeAllPopupForm()\n      })\n      .catch((err) => console.log('Ошибка удаления карточки'))\n      .finally(() => closeAllPopupForm(false))\n  }\n\n\n\n\n\n\n\n  function handleUpdataUser(data, eraseInpup) {\n    console.log(data)\n    api.setInfoonServer(data)\n      .then(res => {\n        setCurrentUser(res)\n\n        closeAllPopupForm()\n\n        eraseInpup()\n      })\n      .catch((error => console.log('Ошибка при загрузке данных пользователя на сервера', error)))\n      .finally(() => closeAllPopup(false))\n  }\n\n\n\n\n\n\n\n  function handleUpdataAvatar(data, eraseInpup) {\n    api.setAvataronServer(data)\n      .then(res => {\n        setCurrentUser(res)\n\n        closeAllPopupForm()\n\n        eraseInpup()\n      })\n      .catch((error => console.log('Ошибка при загрузке данных аватара на сервера', error)))\n      .finally(() => closeAllPopupForm(false))\n\n  }\n\n\n\n\n\n\n\n  function handleAddPlaceSubmit(data, eraseInpup) {\n    api.addCardonServer(data)\n      .then(res => {\n        setCards([res, ...cards])\n        closeAllPopupForm()\n        eraseInpup()\n      })\n      .catch((error => console.log('Ошибка при загрузке данных карточки на сервера', error)))\n      .finally(() => closeAllPopupForm(false))\n\n  }\n\n\n\n\n\n\n\n\n\n \n\n  //  function handleCardLike(card) {\n  //    // Снова проверяем, есть ли уже лайк на этой карточке\n  //    const isLiked = card.likes.some(i => i._id === currentUser._id);\n  //\n  //    // Отправляем запрос в API и получаем обновлённые данные карточки\n  //    api.changeLikeCardStatus(card._id, !isLiked).then((newCard) => {\n  //      setCards((state) => state.map((c) => c._id === card._id ? newCard : c));\n  //    });\n  //  }\n\n\n\n\n\n \n\n\n//нужно добавить!!!!!!!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//нужно добавить!!!!!!!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <>\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        <Header />\n\n\n\n\n        <Main\n          onEditAvatar={handleEditAvatarClick}\n          onEditProfile={handleEditProfileClick}\n          onAddPlace={handleAddPlaceClick}\n          onCardClick={handleCardClick}\n          onDeletePlace={handleDeleteClick}\n          cards={cards}\n        />\n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        <Footer />\n\n\n\n\n\n\n\n\n\n        <EditAvatarPopup\n          onUpdateAvatar={handleUpdataAvatar}\n          isOpen={isEditAvatarPopupOpen}\n          onClose={closeAllPopupForm}\n        />\n\n\n\n\n\n        <EditProfilePopup\n          onUpdateUser={handleUpdataUser}\n          isOpen={isEditProfilePopupOpen}\n          onClose={closeAllPopupForm}\n\n        />\n\n\n\n\n        <AddPlacePopup\n          onAddPlace={handleAddPlaceSubmit}\n          isOpen={isAddPlacePopupOpen}\n          onClose={closeAllPopupForm}\n        />\n\n\n\n\n\n        <PopupWithForm\n          name='delete'\n          title='Вы уверены?'\n          subtitle='Да'\n          isOpen={isDeletePopupOpen}\n          onClose={closeAllPopupForm}\n          onSubmit={handleCardDelete}\n        />\n\n\n\n\n\n\n        {/* Открытие карточки - изоражение из карточки*/}\n        <ImagePopup\n          cardPic={selectedCard}\n          onClose={closeAllPopupForm}\n          isOpen={isPictureOnPopup}\n        />\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      </>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
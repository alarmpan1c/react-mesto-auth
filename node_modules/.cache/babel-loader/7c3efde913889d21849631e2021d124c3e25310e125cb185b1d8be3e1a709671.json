{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Downloads\\\\Telegram Desktop\\\\mesto-react10last1-1\\\\mesto-react\\\\src\\\\components\\\\App.jsx\",\n  _s = $RefreshSig$();\n//import logo from './logo.svg';\nimport api from \"../utils/api\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Footer from \"./Footer\";\nimport ImagePopup from \"./ImagePopup\";\nimport PopupWithForm from \"./PopupWIthForm\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport CurrentUserContext from \"../context/CurrentUserContexts\";\nimport EditProfilePopup from \"./EditProfilePopup\";\nimport EditAvatarPopup from \"./EditAvatarPopup\";\nimport AddPlacePopup from \"./AddPlacePopup\";\nimport Info from \"./Info\";\n\n//import { useState } from \"react\";\n//import Card from \"./Card\";\n\nimport './App.css';\nimport { Navigate, Route, Routes, useNavigate } from 'react-router-dom';\n//import DeletePopup from './DeletePopup/DeletePopup'\nimport ProtectedRoute from './ProtectedRoute/ProtectedRoute';\nimport { getUserData } from '../utils/auth';\n//import SendContext from '../contexts/SendContext'\nimport { authorization } from \"../utils/auth\";\nimport { auth } from '../utils/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false); //начальное значение скрытое\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false); //начальное значение скрытое\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false); //начальное значение скрытое\n  const [selectedCard, setSelectedCard] = useState({});\n  const [isPictureOnPopup, setIsPictureOnPopup] = useState(false); //начальное значение скрытое\n  const [isDeletePopupOpen, setIsDeletePopupOpen] = useState(false); //начальное значение скрытое\n  // const [isLiked, setIsLiked] = useState(false);\n  // const [setupCard, setSetupCard] = useState(true)\n  const [cards, setCards] = useState([]);\n  const [idCardForErase, setIdCardForErase] = useState('');\n  //console.log(isSelectedCard)\n\n  function handleUpdataUser(data, eraseInpup) {\n    console.log(data);\n    api.setInfoonServer(data).then(res => {\n      setCurrentUser(res);\n      closeAllPopupForm();\n      eraseInpup();\n    }).catch(error => console.log('Ошибка при загрузке данных пользователя на сервера', error)).finally(() => closeAllPopup(false));\n  }\n  function handleUpdataAvatar(data, eraseInpup) {\n    api.setAvataronServer(data).then(res => {\n      setCurrentUser(res);\n      closeAllPopupForm();\n      eraseInpup();\n    }).catch(error => console.log('Ошибка при загрузке данных аватара на сервера', error)).finally(() => closeAllPopupForm(false));\n  }\n  function handleAddPlaceSubmit(data, eraseInpup) {\n    api.addCardonServer(data).then(res => {\n      setCards([res, ...cards]);\n      closeAllPopupForm();\n      eraseInpup();\n    }).catch(error => console.log('Ошибка при загрузке данных карточки на сервера', error)).finally(() => closeAllPopupForm(false));\n  }\n  useEffect(() => {\n    if (localStorage.jwt) {\n      getUserData(localStorage.jwt).then(res => {\n        setDataUser(res.data.email);\n        setLoggedIn(true);\n        navigate('/');\n      }).catch(err => console.log(`Ошибкак авторизации повторном входе ${err}`));\n    }\n  }, [navigate]);\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n    listnerEscape();\n  }\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n    listnerEscape();\n  }\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n    listnerEscape();\n  }\n  function handleCardClick(card) {\n    setSelectedCard(card);\n    setIsPictureOnPopup(true);\n    listnerEscape();\n  }\n  const closeAllPopup = useCallback(() => {\n    setIsEditAvatarPopupOpen(false);\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsPictureOnPopup(false);\n    setIsDeletePopupOpen(false);\n    setIsSuccessful(false);\n    setIsError(false);\n  }, []);\n  const closeByEscape = useCallback(evt => {\n    if (evt.key === 'Escape') {\n      closeAllPopup();\n      document.removeEventListener('keydown', closeByEscape);\n    }\n  }, [closeAllPopup]);\n  function handleDeleteClick(IDofCard) {\n    setIsDeletePopupOpen(true);\n    listnerEscape();\n    setIdCardForErase(IDofCard);\n  }\n  function handleCardDelete(evt) {\n    evt.preventDefault();\n    api.eraseCardonServer(idCardForErase).then(res => {\n      setCards(cards.filter(items => {\n        return items._id !== idCardForErase;\n      }));\n      //console.log(res)\n      closeAllPopupForm();\n    }).catch(err => console.log('Ошибка удаления карточки')).finally(() => closeAllPopupForm(false));\n  }\n\n  //  function handleCardLike(card) {\n  //    // Снова проверяем, есть ли уже лайк на этой карточке\n  //    const isLiked = card.likes.some(i => i._id === currentUser._id);\n  //\n  //    // Отправляем запрос в API и получаем обновлённые данные карточки\n  //    api.changeLikeCardStatus(card._id, !isLiked).then((newCard) => {\n  //      setCards((state) => state.map((c) => c._id === card._id ? newCard : c));\n  //    });\n  //  }\n\n  function listnerEscape() {\n    document.addEventListener('keydown', closeByEscape);\n  }\n  const closeAllPopupForm = useCallback(() => {\n    closeAllPopup();\n    document.removeEventListener('keydown', closeByEscape);\n  }, [closeAllPopup, closeByEscape]);\n  const [currentUser, setCurrentUser] = useState({});\n  //console.log(cards)\n\n  useEffect(() => {\n    //setSetupCard(true)\n    //Вывод массива карточек с сервера\n    Promise.all([api.getInfo(), api.getPicture()]).then(([infoUser, infoPicture]) => {\n      //console.log(infoPicture)\n      setCurrentUser(infoUser);\n      setCards(infoPicture);\n\n      //setSetupCard(false )\n    }).catch(error => console.log('Ошибка при загрузке карточек с сервера', error));\n\n    //console.log(infoPicture)\n  }, []);\n  const [isSuccessful, setIsSuccessful] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [loggedIn, setLoggedIn] = useState(false);\n  function handleLogin(password, email) {\n    authorization(password, email).then(res => {\n      localStorage.setItem('jwt', res.token);\n      setLoggedIn(true);\n      navigate('/');\n    }).catch(err => {\n      setIsError(true);\n      console.error(`Ошибкак при авторизации ${err}`);\n    }).finally();\n  }\n  function handleRegister(password, email) {\n    auth(password, email).then(res => {\n      setIsSuccessful(true);\n      navigate('/sign-in');\n    }).catch(err => {\n      setIsError(true);\n      console.error(`Ошибкак при регистрации ${err}`);\n    }).finally();\n  }\n  return /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n    value: currentUser,\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        onEditAvatar: handleEditAvatarClick,\n        onEditProfile: handleEditProfileClick,\n        onAddPlace: handleAddPlaceClick,\n        onCardClick: handleCardClick,\n        onDeletePlace: handleDeleteClick\n        //          onCardLike={handleCardLike}\n        ,\n        cards: cards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditProfilePopup, {\n        onUpdateUser: handleUpdataUser,\n        isOpen: isEditProfilePopupOpen,\n        onClose: closeAllPopupForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddPlacePopup, {\n        onAddPlace: handleAddPlaceSubmit,\n        isOpen: isAddPlacePopupOpen,\n        onClose: closeAllPopupForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditAvatarPopup, {\n        onUpdateAvatar: handleUpdataAvatar,\n        isOpen: isEditAvatarPopupOpen,\n        onClose: closeAllPopupForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PopupWithForm, {\n        name: \"delete\",\n        title: \"\\u0412\\u044B \\u0443\\u0432\\u0435\\u0440\\u0435\\u043D\\u044B?\",\n        subtitle: \"\\u0414\\u0430\",\n        isOpen: isDeletePopupOpen,\n        onClose: closeAllPopupForm,\n        onSubmit: handleCardDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImagePopup, {\n        cardPic: selectedCard,\n        onClose: closeAllPopupForm,\n        isOpen: isPictureOnPopup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Info, {\n        name: \"successful\",\n        titleText: 'Вы успешно зарегистрировались!',\n        isOpen: isSuccessful,\n        onClose: closeAllPopups\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Info, {\n        name: \"error\",\n        titleText: 'Что-то пошло не так! Попробуйте ещё раз.',\n        isOpen: isError,\n        onClose: closeAllPopups\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lJteoKdMK5PocDep+KP35QbU8Z0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["api","Header","Main","Footer","ImagePopup","PopupWithForm","useCallback","useEffect","useState","CurrentUserContext","EditProfilePopup","EditAvatarPopup","AddPlacePopup","Info","Navigate","Route","Routes","useNavigate","ProtectedRoute","getUserData","authorization","auth","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","selectedCard","setSelectedCard","isPictureOnPopup","setIsPictureOnPopup","isDeletePopupOpen","setIsDeletePopupOpen","cards","setCards","idCardForErase","setIdCardForErase","handleUpdataUser","data","eraseInpup","console","log","setInfoonServer","then","res","setCurrentUser","closeAllPopupForm","catch","error","finally","closeAllPopup","handleUpdataAvatar","setAvataronServer","handleAddPlaceSubmit","addCardonServer","localStorage","jwt","setDataUser","email","setLoggedIn","navigate","err","handleEditAvatarClick","listnerEscape","handleEditProfileClick","handleAddPlaceClick","handleCardClick","card","setIsSuccessful","setIsError","closeByEscape","evt","key","document","removeEventListener","handleDeleteClick","IDofCard","handleCardDelete","preventDefault","eraseCardonServer","filter","items","_id","addEventListener","currentUser","Promise","all","getInfo","getPicture","infoUser","infoPicture","isSuccessful","isError","loggedIn","handleLogin","password","setItem","token","handleRegister","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","onEditAvatar","onEditProfile","onAddPlace","onCardClick","onDeletePlace","onUpdateUser","isOpen","onClose","onUpdateAvatar","name","title","subtitle","onSubmit","cardPic","titleText","closeAllPopups","_c","$RefreshReg$"],"sources":["C:/Users/User/Downloads/Telegram Desktop/mesto-react10last1-1/mesto-react/src/components/App.jsx"],"sourcesContent":["//import logo from './logo.svg';\nimport api from \"../utils/api\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Footer from \"./Footer\";\nimport ImagePopup from \"./ImagePopup\";\nimport PopupWithForm from \"./PopupWIthForm\";\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport CurrentUserContext from \"../context/CurrentUserContexts\";\nimport EditProfilePopup from \"./EditProfilePopup\";\nimport EditAvatarPopup from \"./EditAvatarPopup\";\nimport AddPlacePopup from \"./AddPlacePopup\";\nimport Info from \"./Info\";\n\n//import { useState } from \"react\";\n//import Card from \"./Card\";\n\n\n\nimport './App.css'\n\nimport { Navigate, Route, Routes, useNavigate } from 'react-router-dom'\n//import DeletePopup from './DeletePopup/DeletePopup'\nimport ProtectedRoute from './ProtectedRoute/ProtectedRoute'\nimport { getUserData } from '../utils/auth'\n//import SendContext from '../contexts/SendContext'\nimport { authorization } from \"../utils/auth\"\nimport { auth } from '../utils/auth'\n\n\n\n\n\nfunction App() {\n\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false);//начальное значение скрытое\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false);//начальное значение скрытое\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false);//начальное значение скрытое\n  const [selectedCard, setSelectedCard] = useState({});\n  const [isPictureOnPopup, setIsPictureOnPopup] = useState(false);//начальное значение скрытое\n  const [isDeletePopupOpen, setIsDeletePopupOpen] = useState(false);//начальное значение скрытое\n  // const [isLiked, setIsLiked] = useState(false);\n  // const [setupCard, setSetupCard] = useState(true)\n  const [cards, setCards] = useState([]);\n  const [idCardForErase, setIdCardForErase] = useState('');\n  //console.log(isSelectedCard)\n\n  function handleUpdataUser(data, eraseInpup) {\n\n    console.log(data)\n    api.setInfoonServer(data)\n      .then(res => {\n        setCurrentUser(res)\n\n        closeAllPopupForm()\n\n        eraseInpup()\n      })\n      .catch((error => console.log('Ошибка при загрузке данных пользователя на сервера', error)))\n      .finally(() => closeAllPopup(false))\n\n  }\n\n  function handleUpdataAvatar(data, eraseInpup) {\n\n    api.setAvataronServer(data)\n      .then(res => {\n        setCurrentUser(res)\n\n        closeAllPopupForm()\n\n        eraseInpup()\n      })\n      .catch((error => console.log('Ошибка при загрузке данных аватара на сервера', error)))\n      .finally(() => closeAllPopupForm(false))\n\n  }\n\n  function handleAddPlaceSubmit(data, eraseInpup) {\n\n    api.addCardonServer(data)\n      .then(res => {\n        setCards([res, ...cards])\n        closeAllPopupForm()\n        eraseInpup()\n      })\n      .catch((error => console.log('Ошибка при загрузке данных карточки на сервера', error)))\n      .finally(() => closeAllPopupForm(false))\n\n  }\n\n\n  useEffect(() => {\n    if (localStorage.jwt) {\n      getUserData(localStorage.jwt)\n        .then(res => {\n          setDataUser(res.data.email)\n          setLoggedIn(true)\n          navigate('/')\n        })\n        .catch(err => console.log(`Ошибкак авторизации повторном входе ${err}`))\n    }\n  }, [navigate])\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true)\n    listnerEscape()\n  }\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true)\n    listnerEscape()\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true)\n    listnerEscape()\n  }\n\n  function handleCardClick(card) {\n    setSelectedCard(card)\n    setIsPictureOnPopup(true)\n    listnerEscape()\n  }\n\n  const closeAllPopup = useCallback(() => {\n    setIsEditAvatarPopupOpen(false)\n    setIsEditProfilePopupOpen(false)\n    setIsAddPlacePopupOpen(false)\n    setIsPictureOnPopup(false)\n    setIsDeletePopupOpen(false)\n    setIsSuccessful(false)\n    setIsError(false)\n  }, [])\n\n  const closeByEscape = useCallback((evt) => {\n    if (evt.key === 'Escape') {\n      closeAllPopup()\n      document.removeEventListener('keydown', closeByEscape)\n\n    }\n\n  }, [closeAllPopup]\n\n  )\n\n  function handleDeleteClick(IDofCard) {\n    setIsDeletePopupOpen(true)\n    listnerEscape()\n    setIdCardForErase(IDofCard)\n  }\n\n  function handleCardDelete(evt) {\n    evt.preventDefault()\n    api.eraseCardonServer(idCardForErase)\n      .then(res => {\n        setCards(cards.filter(items => {\n          return items._id !== idCardForErase\n        }))\n        //console.log(res)\n        closeAllPopupForm()\n      })\n      .catch((err) => console.log('Ошибка удаления карточки'))\n      .finally(() => closeAllPopupForm(false))\n  }\n\n//  function handleCardLike(card) {\n//    // Снова проверяем, есть ли уже лайк на этой карточке\n//    const isLiked = card.likes.some(i => i._id === currentUser._id);\n//\n//    // Отправляем запрос в API и получаем обновлённые данные карточки\n//    api.changeLikeCardStatus(card._id, !isLiked).then((newCard) => {\n//      setCards((state) => state.map((c) => c._id === card._id ? newCard : c));\n//    });\n//  }\n\n  function listnerEscape() {\n    document.addEventListener('keydown', closeByEscape)\n  }\n\n  const closeAllPopupForm = useCallback(() => {\n    closeAllPopup()\n    document.removeEventListener('keydown', closeByEscape)\n  }, [closeAllPopup, closeByEscape])\n\n  const [currentUser, setCurrentUser] = useState({})\n  //console.log(cards)\n\n  useEffect(() => {\n    //setSetupCard(true)\n    //Вывод массива карточек с сервера\n    Promise.all([api.getInfo(), api.getPicture()])\n      .then(([infoUser, infoPicture]) => {\n        //console.log(infoPicture)\n        setCurrentUser(infoUser)\n        setCards(infoPicture)\n\n        //setSetupCard(false )\n      })\n      .catch((error => console.log('Ошибка при загрузке карточек с сервера', error)))\n\n    //console.log(infoPicture)\n  }, [])\n\n\n\n  const [isSuccessful, setIsSuccessful] = useState(false)\n  const [isError, setIsError] = useState(false)\n  const [loggedIn, setLoggedIn] = useState(false)\n\n  function handleLogin(password, email) {\n  \n    authorization(password, email)\n      .then(res => {\n        localStorage.setItem('jwt', res.token)\n        setLoggedIn(true)\n        navigate('/')\n      })\n      .catch(err => {\n        setIsError(true)\n        console.error(`Ошибкак при авторизации ${err}`)\n      })\n      .finally()\n  }\n\n  function handleRegister(password, email) {\n  \n    auth(password, email)\n      .then(res => {\n        setIsSuccessful(true)\n        navigate('/sign-in')\n      })\n      .catch((err) => {\n        setIsError(true)\n        console.error(`Ошибкак при регистрации ${err}`)\n      })\n      .finally()\n  }\n\n\n\n\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <>\n        <Header />\n\n        <Main\n          onEditAvatar={handleEditAvatarClick}\n          onEditProfile={handleEditProfileClick}\n          onAddPlace={handleAddPlaceClick}\n          onCardClick={handleCardClick}\n          onDeletePlace={handleDeleteClick}\n//          onCardLike={handleCardLike}\n          cards={cards}\n        />\n\n        <Footer />\n\n        <EditProfilePopup\n          onUpdateUser={handleUpdataUser}\n          isOpen={isEditProfilePopupOpen}\n          onClose={closeAllPopupForm}\n\n        />\n\n        <AddPlacePopup\n          onAddPlace={handleAddPlaceSubmit}\n          isOpen={isAddPlacePopupOpen}\n          onClose={closeAllPopupForm}\n        />\n\n\n        <EditAvatarPopup\n\n          onUpdateAvatar={handleUpdataAvatar}\n          isOpen={isEditAvatarPopupOpen}\n          onClose={closeAllPopupForm}\n        />\n\n        <PopupWithForm\n          name='delete'\n          title='Вы уверены?'\n          subtitle='Да'\n          isOpen={isDeletePopupOpen}\n          onClose={closeAllPopupForm}\n          onSubmit={handleCardDelete}\n        />\n\n        {/* Открытие карточки - изоражение из карточки*/}\n        <ImagePopup\n          cardPic={selectedCard}\n          onClose={closeAllPopupForm}\n          isOpen={isPictureOnPopup}\n        />\n\n\n\n        <Info\n          name='successful'\n          titleText={'Вы успешно зарегистрировались!'}\n          isOpen={isSuccessful}\n          onClose={closeAllPopups}\n        />\n\n        <Info\n          name='error'\n          titleText={'Что-то пошло не так! Попробуйте ещё раз.'}\n          isOpen={isError}\n          onClose={closeAllPopups}\n        />    \n\n      </>\n    </CurrentUserContext.Provider>\n  );\n\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
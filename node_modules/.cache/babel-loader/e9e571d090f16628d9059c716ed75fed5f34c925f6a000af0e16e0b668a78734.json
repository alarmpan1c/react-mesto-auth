{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._url = options.baseUrl;\n    this._headers = options.headers;\n    this._token = options.headers.authorization;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`${res.status}`);\n    }\n  }\n  _request(url, option) {\n    return fetch(url, option).then(this._checkResponse);\n  }\n  getInfo() {\n    return this._request(`${this._url}/users/me`, {\n      headers: {\n        authorization: this._token\n      }\n    });\n  }\n  getPicture() {\n    return this._request(`${this._url}/cards`, {\n      headers: {\n        authorization: this._token\n      }\n    });\n  }\n  addHeartonServer(infoforServer) {\n    return this._request(`${this._url}/cards/${infoforServer}/likes`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  eraseHeartonServer(infoforServer) {\n    return this._request(`${this._url}/cards/${infoforServer}/likes`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  setInfoonServer(infoforServer) {\n    return this._request(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: infoforServer.name,\n        about: infoforServer.job\n      })\n    });\n  }\n  setAvataronServer(infoforServer) {\n    return this._request(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: infoforServer.avatar\n      })\n    });\n  }\n  eraseCardonServer(infoforServer) {\n    return this._request(`${this._url}/cards/${infoforServer}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  addCardonServer(infoforServer) {\n    return this._request(`${this._url}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: infoforServer.place,\n        link: infoforServer.link\n      })\n    });\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-69',\n  headers: {\n    authorization: '39c5dd3e-18c5-4109-bb7f-0a82c5dea405',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_url","baseUrl","_headers","headers","_token","authorization","_checkResponse","res","ok","json","Promise","reject","status","_request","url","option","fetch","then","getInfo","getPicture","addHeartonServer","infoforServer","method","eraseHeartonServer","setInfoonServer","body","JSON","stringify","name","about","job","setAvataronServer","avatar","eraseCardonServer","addCardonServer","place","link","api"],"sources":["C:/Users/08908/dev/mesto-react/src/utils/api.js"],"sourcesContent":["class Api {\r\n  constructor (options) {\r\n\r\n      this._url = options.baseUrl;\r\n      this._headers = options.headers;\r\n      this._token = options.headers.authorization;\r\n  }\r\n\r\n  _checkResponse(res){\r\n    if(res.ok) {\r\n      return res.json();\r\n    } else {\r\n    return Promise.reject(`${res.status}`);\r\n    }\r\n  }\r\n  _request(url, option) {\r\n    return fetch(url, option).then(this._checkResponse)\r\n  }\r\n\r\n  getInfo(){\r\n      return this._request(`${this._url}/users/me`, {headers: {authorization:  this._token}})\r\n    }\r\n  getPicture(){\r\n       return this._request(`${this._url}/cards`, {headers: {authorization:  this._token}})\r\n  }\r\n  addHeartonServer(infoforServer){\r\n      return this._request(`${this._url}/cards/${infoforServer}/likes`, {method: 'PUT', headers: {authorization: this._token,'Content-Type': 'application/json'}, })\r\n  }\r\n  eraseHeartonServer(infoforServer){\r\n      return this._request(`${this._url}/cards/${infoforServer}/likes`, {\r\n          method: 'DELETE',\r\n           headers: {\r\n               authorization: this._token,\r\n               'Content-Type': 'application/json'\r\n             },\r\n        })\r\n  }\r\n  setInfoonServer(infoforServer){\r\n      return this._request(`${this._url}/users/me`, {\r\n          method: 'PATCH',\r\n           headers: {\r\n               authorization: this._token,\r\n               'Content-Type': 'application/json'\r\n             },\r\n          body: JSON.stringify({\r\n            name: infoforServer.name,\r\n            about: infoforServer.job\r\n          })\r\n        })\r\n  }\r\n  setAvataronServer(infoforServer){\r\n      return this._request(`${this._url}/users/me/avatar`, {\r\n          method: 'PATCH',\r\n           headers: {\r\n               authorization: this._token,\r\n               'Content-Type': 'application/json'\r\n             },\r\n          body: JSON.stringify({\r\n            avatar: infoforServer.avatar,\r\n          })\r\n        })\r\n  }\r\n  eraseCardonServer(infoforServer){\r\n      return this._request(`${this._url}/cards/${infoforServer}`, {\r\n          method: 'DELETE',\r\n           headers: {\r\n               authorization: this._token,\r\n               'Content-Type': 'application/json'\r\n             },\r\n        })\r\n  }\r\n  addCardonServer(infoforServer){\r\n      return this._request(`${this._url}/cards`, {\r\n          method: 'POST',\r\n           headers: {\r\n               authorization: this._token,\r\n               'Content-Type': 'application/json'\r\n             },\r\n          body: JSON.stringify({\r\n            name: infoforServer.place,\r\n            link: infoforServer.link\r\n          })\r\n        })\r\n  }\r\n  \r\n\r\n}\r\n\r\nconst api = new Api({\r\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-69',\r\n  headers: {\r\n    authorization: '39c5dd3e-18c5-4109-bb7f-0a82c5dea405',\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\nexport default api;"],"mappings":"AAAA,MAAMA,GAAG,CAAC;EACRC,WAAWA,CAAEC,OAAO,EAAE;IAElB,IAAI,CAACC,IAAI,GAAGD,OAAO,CAACE,OAAO;IAC3B,IAAI,CAACC,QAAQ,GAAGH,OAAO,CAACI,OAAO;IAC/B,IAAI,CAACC,MAAM,GAAGL,OAAO,CAACI,OAAO,CAACE,aAAa;EAC/C;EAEAC,cAAcA,CAACC,GAAG,EAAC;IACjB,IAAGA,GAAG,CAACC,EAAE,EAAE;MACT,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;IACnB,CAAC,MAAM;MACP,OAAOC,OAAO,CAACC,MAAM,CAAE,GAAEJ,GAAG,CAACK,MAAO,EAAC,CAAC;IACtC;EACF;EACAC,QAAQA,CAACC,GAAG,EAAEC,MAAM,EAAE;IACpB,OAAOC,KAAK,CAACF,GAAG,EAAEC,MAAM,CAAC,CAACE,IAAI,CAAC,IAAI,CAACX,cAAc,CAAC;EACrD;EAEAY,OAAOA,CAAA,EAAE;IACL,OAAO,IAAI,CAACL,QAAQ,CAAE,GAAE,IAAI,CAACb,IAAK,WAAU,EAAE;MAACG,OAAO,EAAE;QAACE,aAAa,EAAG,IAAI,CAACD;MAAM;IAAC,CAAC,CAAC;EACzF;EACFe,UAAUA,CAAA,EAAE;IACP,OAAO,IAAI,CAACN,QAAQ,CAAE,GAAE,IAAI,CAACb,IAAK,QAAO,EAAE;MAACG,OAAO,EAAE;QAACE,aAAa,EAAG,IAAI,CAACD;MAAM;IAAC,CAAC,CAAC;EACzF;EACAgB,gBAAgBA,CAACC,aAAa,EAAC;IAC3B,OAAO,IAAI,CAACR,QAAQ,CAAE,GAAE,IAAI,CAACb,IAAK,UAASqB,aAAc,QAAO,EAAE;MAACC,MAAM,EAAE,KAAK;MAAEnB,OAAO,EAAE;QAACE,aAAa,EAAE,IAAI,CAACD,MAAM;QAAC,cAAc,EAAE;MAAkB;IAAG,CAAC,CAAC;EAClK;EACAmB,kBAAkBA,CAACF,aAAa,EAAC;IAC7B,OAAO,IAAI,CAACR,QAAQ,CAAE,GAAE,IAAI,CAACb,IAAK,UAASqB,aAAc,QAAO,EAAE;MAC9DC,MAAM,EAAE,QAAQ;MACfnB,OAAO,EAAE;QACLE,aAAa,EAAE,IAAI,CAACD,MAAM;QAC1B,cAAc,EAAE;MAClB;IACL,CAAC,CAAC;EACR;EACAoB,eAAeA,CAACH,aAAa,EAAC;IAC1B,OAAO,IAAI,CAACR,QAAQ,CAAE,GAAE,IAAI,CAACb,IAAK,WAAU,EAAE;MAC1CsB,MAAM,EAAE,OAAO;MACdnB,OAAO,EAAE;QACLE,aAAa,EAAE,IAAI,CAACD,MAAM;QAC1B,cAAc,EAAE;MAClB,CAAC;MACJqB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAEP,aAAa,CAACO,IAAI;QACxBC,KAAK,EAAER,aAAa,CAACS;MACvB,CAAC;IACH,CAAC,CAAC;EACR;EACAC,iBAAiBA,CAACV,aAAa,EAAC;IAC5B,OAAO,IAAI,CAACR,QAAQ,CAAE,GAAE,IAAI,CAACb,IAAK,kBAAiB,EAAE;MACjDsB,MAAM,EAAE,OAAO;MACdnB,OAAO,EAAE;QACLE,aAAa,EAAE,IAAI,CAACD,MAAM;QAC1B,cAAc,EAAE;MAClB,CAAC;MACJqB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBK,MAAM,EAAEX,aAAa,CAACW;MACxB,CAAC;IACH,CAAC,CAAC;EACR;EACAC,iBAAiBA,CAACZ,aAAa,EAAC;IAC5B,OAAO,IAAI,CAACR,QAAQ,CAAE,GAAE,IAAI,CAACb,IAAK,UAASqB,aAAc,EAAC,EAAE;MACxDC,MAAM,EAAE,QAAQ;MACfnB,OAAO,EAAE;QACLE,aAAa,EAAE,IAAI,CAACD,MAAM;QAC1B,cAAc,EAAE;MAClB;IACL,CAAC,CAAC;EACR;EACA8B,eAAeA,CAACb,aAAa,EAAC;IAC1B,OAAO,IAAI,CAACR,QAAQ,CAAE,GAAE,IAAI,CAACb,IAAK,QAAO,EAAE;MACvCsB,MAAM,EAAE,MAAM;MACbnB,OAAO,EAAE;QACLE,aAAa,EAAE,IAAI,CAACD,MAAM;QAC1B,cAAc,EAAE;MAClB,CAAC;MACJqB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAEP,aAAa,CAACc,KAAK;QACzBC,IAAI,EAAEf,aAAa,CAACe;MACtB,CAAC;IACH,CAAC,CAAC;EACR;AAGF;AAEA,MAAMC,GAAG,GAAG,IAAIxC,GAAG,CAAC;EAClBI,OAAO,EAAE,6CAA6C;EACtDE,OAAO,EAAE;IACPE,aAAa,EAAE,sCAAsC;IACrD,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,eAAegC,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}